---
import MainLayout from '../layouts/MainLayout.astro';
import { Settings, Save, Trash2, Plus, Link, Webhook } from 'lucide-react';
---

<MainLayout title="Settings">
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold flex items-center gap-2">
        <Settings className="w-8 h-8 text-primary" />
        Settings
      </h1>
      <p class="text-base-content/70 mt-2">
        Manage your Discord webhook settings and preferences.
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Sidebar Navigation -->
      <div class="lg:col-span-1">
        <div class="bg-base-100 rounded-box shadow-sm p-4">
          <ul class="menu menu-vertical w-full">
            <li>
              <a href="#webhooks" class="active">
                <Webhook className="w-5 h-5" />
                Discord Webhooks
              </a>
            </li>
            <li>
              <a href="#account">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                  <path d="M19.952 11.992c0-1.248-0.144-2.424-0.432-3.552 1.128 0.696 1.968 1.824 2.208 3.168-0.432-0.36-1.008-0.576-1.776-0.576v0.96zM5.952 11.992c0-1.248 0.144-2.424 0.432-3.552-1.128 0.696-1.968 1.824-2.208 3.168 0.432-0.36 1.008-0.576 1.776-0.576v0.96zM19.952 11.992c0 3.744-2.4 6.576-5.952 6.576s-5.952-2.832-5.952-6.576c0-3.744 2.4-6.576 5.952-6.576s5.952 2.832 5.952 6.576zM22.16 11.992c0-4.584-3.648-8.16-8.16-8.16s-8.16 3.576-8.16 8.16c0 4.584 3.648 8.16 8.16 8.16s8.16-3.576 8.16-8.16zM18.136 5.168c-1.248-0.864-2.64-1.296-4.128-1.296s-2.88 0.432-4.128 1.296c1.248-0.576 2.64-0.864 4.128-0.864s2.88 0.288 4.128 0.864zM18.136 18.816c-1.248 0.864-2.64 1.296-4.128 1.296s-2.88-0.432-4.128-1.296c1.248 0.576 2.64 0.864 4.128 0.864s2.88-0.288 4.128-0.864z"></path>
                </svg>
                Discord Account
              </a>
            </li>
          </ul>
        </div>
      </div>

      <!-- Main Content -->
      <div class="lg:col-span-2">
        <!-- Webhooks Section -->
        <div id="webhooks" class="bg-base-100 rounded-box shadow-sm p-6">
          <h2 class="text-2xl font-bold mb-4 flex items-center gap-2">
            <Webhook className="w-6 h-6" />
            Discord Webhooks
          </h2>
          
          <p class="mb-6">
            Configure Discord webhooks to automatically post your music releases to specific channels.
          </p>
          
          <div id="webhook-list" class="space-y-4 mb-6">
            <!-- Loading state -->
            <div class="animate-pulse">
              <div class="h-16 bg-base-300 rounded-lg mb-2"></div>
              <div class="h-16 bg-base-300 rounded-lg"></div>
            </div>
          </div>
          
          <!-- Add Webhook Form -->
          <div class="collapse collapse-arrow bg-base-200">
            <input type="checkbox" /> 
            <div class="collapse-title font-medium flex items-center gap-2">
              <Plus className="w-5 h-5 text-primary" />
              Add New Webhook
            </div>
            <div class="collapse-content">
              <form id="webhook-form" class="space-y-4 mt-2">
                <div class="form-control">
                  <label class="label">
                    <span class="label-text">Webhook Name</span>
                  </label>
                  <input 
                    type="text" 
                    id="webhook-name" 
                    class="input input-bordered w-full" 
                    placeholder="e.g., Music Releases Channel"
                    required
                  />
                </div>
                
                <div class="form-control">
                  <label class="label">
                    <span class="label-text">Webhook URL</span>
                  </label>
                  <input 
                    type="url" 
                    id="webhook-url" 
                    class="input input-bordered w-full" 
                    placeholder="https://discord.com/api/webhooks/..."
                    required
                  />
                  <label class="label">
                    <span class="label-text-alt">
                      The Discord webhook URL for your channel. 
                      <a href="https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks" target="_blank" class="link link-primary">
                        Learn how to create a webhook
                      </a>
                    </span>
                  </label>
                </div>
                
                <div class="form-control">
                  <label class="label cursor-pointer">
                    <span class="label-text">Active</span> 
                    <input type="checkbox" id="webhook-active" class="toggle toggle-primary" checked />
                  </label>
                </div>
                
                <button type="submit" class="btn btn-primary gap-2">
                  <Save className="w-4 h-4" />
                  Save Webhook
                </button>
              </form>
            </div>
          </div>
        </div>
        
        <!-- Account Section -->
        <div id="account" class="bg-base-100 rounded-box shadow-sm p-6 mt-6">
          <h2 class="text-2xl font-bold mb-4 flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
              <path d="M19.952 11.992c0-1.248-0.144-2.424-0.432-3.552 1.128 0.696 1.968 1.824 2.208 3.168-0.432-0.36-1.008-0.576-1.776-0.576v0.96zM5.952 11.992c0-1.248 0.144-2.424 0.432-3.552-1.128 0.696-1.968 1.824-2.208 3.168 0.432-0.36 1.008-0.576 1.776-0.576v0.96zM19.952 11.992c0 3.744-2.4 6.576-5.952 6.576s-5.952-2.832-5.952-6.576c0-3.744 2.4-6.576 5.952-6.576s5.952 2.832 5.952 6.576zM22.16 11.992c0-4.584-3.648-8.16-8.16-8.16s-8.16 3.576-8.16 8.16c0 4.584 3.648 8.16 8.16 8.16s8.16-3.576 8.16-8.16zM18.136 5.168c-1.248-0.864-2.64-1.296-4.128-1.296s-2.88 0.432-4.128 1.296c1.248-0.576 2.64-0.864 4.128-0.864s2.88 0.288 4.128 0.864zM18.136 18.816c-1.248 0.864-2.64 1.296-4.128 1.296s-2.88-0.432-4.128-1.296c1.248 0.576 2.64 0.864 4.128 0.864s2.88-0.288 4.128-0.864z"></path>
            </svg>
            Discord Account
          </h2>
          
          <div id="user-profile" class="flex items-center gap-4 mb-6">
            <div class="skeleton w-16 h-16 rounded-full"></div>
            <div>
              <div class="h-6 w-32 bg-base-300 rounded mb-2"></div>
              <div class="h-4 w-48 bg-base-300 rounded"></div>
            </div>
          </div>
          
          <div class="flex gap-4">
            <button id="logout-button" class="btn btn-outline btn-error gap-2">
              Logout
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Delete Confirmation Modal -->
  <dialog id="delete-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Confirm Deletion</h3>
      <p class="py-4">Are you sure you want to delete this webhook? This action cannot be undone.</p>
      <div class="modal-action">
        <button id="cancel-delete" class="btn">Cancel</button>
        <button id="confirm-delete" class="btn btn-error">Delete</button>
      </div>
    </div>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
</MainLayout>

<script>
  // Store the webhook ID to delete
  let webhookToDelete = null;
  
  // Fetch webhooks
  const fetchWebhooks = async () => {
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/webhooks`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch webhooks');
      }
      
      const webhooks = await response.json();
      renderWebhooks(webhooks);
    } catch (error) {
      console.error('Error fetching webhooks:', error);
      document.getElementById('webhook-list').innerHTML = `
        <div class="alert alert-error">
          <p>Failed to load webhooks. Please try again later.</p>
        </div>
      `;
    }
  };
  
  // Render webhooks
  const renderWebhooks = (webhooks) => {
    const webhookList = document.getElementById('webhook-list');
    
    if (webhooks.length === 0) {
      webhookList.innerHTML = `
        <div class="alert">
          <p>No webhooks configured yet. Add your first webhook below.</p>
        </div>
      `;
      return;
    }
    
    webhookList.innerHTML = webhooks.map(webhook => `
      <div class="card bg-base-200">
        <div class="card-body p-4">
          <div class="flex justify-between items-center">
            <div>
              <h3 class="font-bold">${webhook.name}</h3>
              <p class="text-sm opacity-70 truncate max-w-md">${webhook.url}</p>
            </div>
            <div class="flex items-center gap-2">
              <div class="form-control">
                <label class="label cursor-pointer">
                  <span class="label-text mr-2">Active</span> 
                  <input 
                    type="checkbox" 
                    class="toggle toggle-primary toggle-sm webhook-active" 
                    data-id="${webhook.id}" 
                    ${webhook.active ? 'checked' : ''}
                  />
                </label>
              </div>
              <button class="btn btn-square btn-sm btn-error delete-webhook" data-id="${webhook.id}">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M3 6h18"></path>
                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                  <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  <line x1="10" y1="11" x2="10" y2="17"></line>
                  <line x1="14" y1="11" x2="14" y2="17"></line>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    `).join('');
    
    // Add event listeners for delete buttons
    document.querySelectorAll('.delete-webhook').forEach(button => {
      button.addEventListener('click', () => {
        webhookToDelete = button.getAttribute('data-id');
        document.getElementById('delete-modal').showModal();
      });
    });
    
    // Add event listeners for active toggles
    document.querySelectorAll('.webhook-active').forEach(toggle => {
      toggle.addEventListener('change', async (e) => {
        const webhookId = e.target.getAttribute('data-id');
        const active = e.target.checked;
        
        try {
          const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/webhooks/${webhookId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ active }),
            credentials: 'include',
          });
          
          if (!response.ok) {
            throw new Error('Failed to update webhook');
          }
          
          // Show toast or notification
          alert(active ? 'Webhook activated' : 'Webhook deactivated');
        } catch (error) {
          console.error('Error updating webhook:', error);
          alert('Failed to update webhook status');
          // Reset toggle to previous state
          e.target.checked = !active;
        }
      });
    });
  };
  
  // Fetch user profile
  const fetchUserProfile = async () => {
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/auth/user`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch user profile');
      }
      
      const user = await response.json();
      renderUserProfile(user);
    } catch (error) {
      console.error('Error fetching user profile:', error);
      document.getElementById('user-profile').innerHTML = `
        <div class="alert alert-error">
          <p>Failed to load user profile. Please try again later.</p>
        </div>
      `;
    }
  };
  
  // Render user profile
  const renderUserProfile = (user) => {
    document.getElementById('user-profile').innerHTML = `
      <div class="avatar">
        <div class="w-16 h-16 rounded-full">
          <img src="${user.avatar || 'https://cdn.discordapp.com/embed/avatars/0.png'}" alt="${user.username}" />
        </div>
      </div>
      <div>
        <h3 class="font-bold text-lg">${user.username}</h3>
        <p class="text-sm opacity-70">Connected with Discord</p>
      </div>
    `;
  };
  
  // Handle webhook form submission
  document.getElementById('webhook-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const name = document.getElementById('webhook-name').value;
    const url = document.getElementById('webhook-url').value;
    const active = document.getElementById('webhook-active').checked;
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/webhooks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, url, active }),
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to create webhook');
      }
      
      // Clear form
      document.getElementById('webhook-name').value = '';
      document.getElementById('webhook-url').value = '';
      document.getElementById('webhook-active').checked = true;
      
      // Refresh webhooks list
      fetchWebhooks();
      
      // Close collapse
      document.querySelector('.collapse input').checked = false;
      
      // Show success message
      alert('Webhook created successfully');
    } catch (error) {
      console.error('Error creating webhook:', error);
      alert('Failed to create webhook. Please try again.');
    }
  });
  
  // Handle webhook deletion
  document.getElementById('confirm-delete').addEventListener('click', async () => {
    if (!webhookToDelete) return;
    
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/webhooks/${webhookToDelete}`, {
        method: 'DELETE',
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete webhook');
      }
      
      // Close modal
      document.getElementById('delete-modal').close();
      
      // Refresh webhooks list
      fetchWebhooks();
      
      // Show success message
      alert('Webhook deleted successfully');
    } catch (error) {
      console.error('Error deleting webhook:', error);
      alert('Failed to delete webhook. Please try again.');
      document.getElementById('delete-modal').close();
    }
  });
  
  // Handle cancel delete
  document.getElementById('cancel-delete').addEventListener('click', () => {
    document.getElementById('delete-modal').close();
  });
  
  // Handle logout
  document.getElementById('logout-button').addEventListener('click', async () => {
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/auth/logout`, {
        method: 'POST',
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to logout');
      }
      
      // Redirect to home page
      window.location.href = '/';
    } catch (error) {
      console.error('Error logging out:', error);
      alert('Failed to logout. Please try again.');
    }
  });
  
  // Check if user is authenticated
  const checkAuth = async () => {
    try {
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/auth/user`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        // Redirect to login if not authenticated
        window.location.href = '/login?error=Please log in to access settings';
      } else {
        // Fetch data if authenticated
        fetchWebhooks();
        fetchUserProfile();
      }
    } catch (error) {
      console.error('Auth check error:', error);
      window.location.href = '/login?error=Authentication error';
    }
  };
  
  // Run auth check when page loads
  checkAuth();
</script> 